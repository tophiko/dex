image: smk762/qt-ci:latest

stages:
  - build
  - upload_linux_zip
  - upload_linux_tar
  - upload_linux_appimage
  - test
  
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  VCPKG_DEFAULT_BINARY_CACHE: "$CI_PROJECT_DIR/.cache/vcpkg"
  QT_VERSION: "5.15.2"
  CMAKE_VERSION: "3.20.5"

cache:
  - key: $CI_COMMIT_REF_SLUG
    paths:
      - atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.zip
      - atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.tar.zst
      - atomicdex-desktop-${CI_COMMIT_SHA::9}-x86_64.AppImage
  - key: $CI_PROJECT_NAME
    paths:
      - "$CI_PROJECT_DIR/.cache/vcpkg"
    

linux:build:
  stage: build
  before_script:
    - cd $CI_PROJECT_DIR
    - mkdir -p .cache/pip
    - mkdir -p .cache/vcpkg

  script:
    # Job Variables
    - echo $CI_COMMIT_REF_SLUG
    - echo $CI_COMMIT_AUTHOR
    - echo $CI_COMMIT_BRANCH
    - echo $CI_COMMIT_SHA
    - echo $CI_COMMIT_SHORT_SHA
    - echo $CI_PROJECT_PATH
    - echo $CI_PROJECT_NAME
    - echo $QT_VERSION
    - echo $CMAKE_VERSION

    # Job Path/Env variables
    - export DEBIAN_FRONTEND=noninteractive
    - export QT_INSTALL_CMAKE_PATH=/opt/Qt/$QT_VERSION/gcc_64/lib/cmake
    - export QT_ROOT=/opt/Qt/$QT_VERSION
    - export Qt5_DIR=/opt/Qt/$QT_VERSION/gcc_64/lib/cmake/Qt5
    - export PATH=/opt/Qt/$QT_VERSION/gcc_64/bin:$PATH
    - export PATH=${PATH}:/cmake-$CMAKE_VERSION-linux-x86_64/bin;
    - export APPIMAGE_EXTRACT_AND_RUN=1

    # Update tar
    - export FORCE_UNSAFE_CONFIGURE=1
    - wget https://ftp.wayne.edu/gnu/tar/tar-1.34.tar.gz && tar -xvf tar-1.34.tar.gz
    - cd tar-1.34 && ./configure && make && make install
    - cp src/tar $(which tar)
    
    # Bootstrap Vcpkg
    - cd $CI_PROJECT_DIR; ./ci_tools_atomic_dex/vcpkg-repo/bootstrap-vcpkg.sh

    # NINJA
    - cd $CI_PROJECT_DIR
    - rm -rf build_ninja || echo "no build_ninja folder to rm"
    - mkdir build_ninja && cd $_
    - cmake -DCMAKE_BUILD_TYPE=Release -GNinja ../
    - ninja atomicdex-desktop 
    - ninja install  
    - cd $CI_PROJECT_DIR
    - cp $CI_PROJECT_DIR/bundled/linux/atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.zip .
    - cp $CI_PROJECT_DIR/bundled/linux/atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.tar.zst .
    - cp $CI_PROJECT_DIR/bundled/linux/atomicdex-desktop-${CI_COMMIT_SHA::9}-x86_64.AppImage .

AtomicDex-linux-zip:
  stage: upload_linux_zip
  allow_failure: true
  script:
    - echo "Uploading AppImage..."
  artifacts:
    name: "AtomicDex-linux-${CI_COMMIT_SHA::9}.zip"
    paths:
      - $CI_PROJECT_DIR/atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.zip
    when: always
    expire_in: 3 days

AtomicDex-linux-AppImage:
  stage: upload_linux_appimage
  allow_failure: true
  script:
    - echo "Uploading AppImage..."
  artifacts:
    name: "AtomicDex-linux-${CI_COMMIT_SHA::9}-AppImage"
    paths:
      - $CI_PROJECT_DIR/atomicdex-desktop-${CI_COMMIT_SHA::9}-x86_64.AppImage
    when: always
    expire_in: 3 days

AtomicDex-linux-tar:
  stage: upload_linux_tar
  allow_failure: true
  script:
    - echo "Uploading tar..."
  artifacts:
    name: "AtomicDex-linux-${CI_COMMIT_SHA::9}.tar.zst"
    paths:
      - $CI_PROJECT_DIR/atomicdex-desktop-linux-${CI_COMMIT_SHA::9}.tar.zst
    when: always
    expire_in: 3 days
